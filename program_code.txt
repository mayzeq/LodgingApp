using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.OpenApi.Models;
using LodgingApp.Data;
using LodgingApp.Application.Options;
using LodgingApp.Application.Mapping;
using LodgingApp.Domain.Repositories;
using LodgingApp.Domain.Services.UseCases;
using LodgingApp.Domain.Services.Contracts;

namespace LodgingApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddDbContext<AppDbContext>(opt =>
                opt.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

            builder.Services.Configure<JwtOptions>(builder.Configuration.GetSection("Jwt"));
            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = "LodgingApp",
                    ValidAudience = "LodgingAppUsers",
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("your_super_secret_key_here_1234567890"))
                };
            });

            builder.Services.AddAuthorization();

            builder.Services.AddScoped<IUserRepository, UserRepository>();
            builder.Services.AddScoped<IAdminRepository, AdminRepository>();
            builder.Services.AddScoped<ILodgingRepository, LodgingRepository>();
            builder.Services.AddScoped<IBookingRepository, BookingRepository>();
            builder.Services.AddScoped<IPaymentRepository, PaymentRepository>();
            builder.Services.AddScoped<IReviewRepository, ReviewRepository>();

            builder.Services.AddScoped<IBookingService, BookingService>();
            builder.Services.AddScoped<IPaymentService, PaymentService>();
            builder.Services.AddScoped<IReviewService, ReviewService>();
            builder.Services.AddScoped<ILodgingService, LodgingService>();
            builder.Services.AddScoped<IAuthService, AuthService>();

            builder.Services.AddAutoMapper(typeof(MappingProfile));

            builder.Services.AddControllers()
            .AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve;
            });
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddCors(options =>
            {
                options.AddDefaultPolicy(policy =>
                    policy.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
            });

            builder.Services.AddSwaggerGen(c =>
            {
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement{
                    {
                        new OpenApiSecurityScheme{
                            Reference = new OpenApiReference{
                                Type=ReferenceType.SecurityScheme,
                                Id="Bearer"
                            }
                        },
                        new string[]{}
                    }
                });
            });

            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            app.UseRouting();
            app.UseCors();

            app.UseAuthentication();
            app.UseAuthorization();

            app.MapControllers();

            app.Run();
        }
    }
}

// ===== Controllers =====

// AuthController.cs
using Microsoft.AspNetCore.Mvc;
using LodgingApp.Domain.Services.Contracts;
using LodgingApp.Domain.Entities;

namespace LodgingApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;

        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest request)
        {
            var result = await _authService.LoginAsync(request.Email, request.Password);
            if (result.Success)
                return Ok(result);
            return Unauthorized(result);
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterRequest request)
        {
            var result = await _authService.RegisterAsync(request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }
    }
}

// BookingController.cs
using Microsoft.AspNetCore.Mvc;
using LodgingApp.Domain.Services.Contracts;
using LodgingApp.Domain.Entities;

namespace LodgingApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BookingController : ControllerBase
    {
        private readonly IBookingService _bookingService;

        public BookingController(IBookingService bookingService)
        {
            _bookingService = bookingService;
        }

        [HttpPost]
        public async Task<IActionResult> CreateBooking([FromBody] BookingRequest request)
        {
            var result = await _bookingService.CreateBookingAsync(request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetBooking(int id)
        {
            var result = await _bookingService.GetBookingAsync(id);
            if (result != null)
                return Ok(result);
            return NotFound();
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateBooking(int id, [FromBody] BookingRequest request)
        {
            var result = await _bookingService.UpdateBookingAsync(id, request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> CancelBooking(int id)
        {
            var result = await _bookingService.CancelBookingAsync(id);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }
    }
}

// LodgingController.cs
using Microsoft.AspNetCore.Mvc;
using LodgingApp.Domain.Services.Contracts;
using LodgingApp.Domain.Entities;

namespace LodgingApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class LodgingController : ControllerBase
    {
        private readonly ILodgingService _lodgingService;

        public LodgingController(ILodgingService lodgingService)
        {
            _lodgingService = lodgingService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAllLodgings([FromQuery] LodgingFilter filter)
        {
            var result = await _lodgingService.GetAllLodgingsAsync(filter);
            return Ok(result);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetLodging(int id)
        {
            var result = await _lodgingService.GetLodgingAsync(id);
            if (result != null)
                return Ok(result);
            return NotFound();
        }

        [HttpPost]
        public async Task<IActionResult> CreateLodging([FromBody] LodgingRequest request)
        {
            var result = await _lodgingService.CreateLodgingAsync(request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateLodging(int id, [FromBody] LodgingRequest request)
        {
            var result = await _lodgingService.UpdateLodgingAsync(id, request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteLodging(int id)
        {
            var result = await _lodgingService.DeleteLodgingAsync(id);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }
    }
}

// PaymentController.cs
using Microsoft.AspNetCore.Mvc;
using LodgingApp.Domain.Services.Contracts;
using LodgingApp.Domain.Entities;

namespace LodgingApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class PaymentController : ControllerBase
    {
        private readonly IPaymentService _paymentService;

        public PaymentController(IPaymentService paymentService)
        {
            _paymentService = paymentService;
        }

        [HttpPost]
        public async Task<IActionResult> ProcessPayment([FromBody] PaymentRequest request)
        {
            var result = await _paymentService.ProcessPaymentAsync(request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetPayment(int id)
        {
            var result = await _paymentService.GetPaymentAsync(id);
            if (result != null)
                return Ok(result);
            return NotFound();
        }

        [HttpPost("refund/{id}")]
        public async Task<IActionResult> RefundPayment(int id)
        {
            var result = await _paymentService.RefundPaymentAsync(id);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }
    }
}

// ReviewController.cs
using Microsoft.AspNetCore.Mvc;
using LodgingApp.Domain.Services.Contracts;
using LodgingApp.Domain.Entities;

namespace LodgingApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ReviewController : ControllerBase
    {
        private readonly IReviewService _reviewService;

        public ReviewController(IReviewService reviewService)
        {
            _reviewService = reviewService;
        }

        [HttpPost]
        public async Task<IActionResult> CreateReview([FromBody] ReviewRequest request)
        {
            var result = await _reviewService.CreateReviewAsync(request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpGet("lodging/{lodgingId}")]
        public async Task<IActionResult> GetLodgingReviews(int lodgingId)
        {
            var result = await _reviewService.GetLodgingReviewsAsync(lodgingId);
            return Ok(result);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateReview(int id, [FromBody] ReviewRequest request)
        {
            var result = await _reviewService.UpdateReviewAsync(id, request);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteReview(int id)
        {
            var result = await _reviewService.DeleteReviewAsync(id);
            if (result.Success)
                return Ok(result);
            return BadRequest(result);
        }
    }
}

// ===== Domain Entities =====

// User.cs
namespace LodgingApp.Domain.Entities
{
    public class User
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
        public List<Booking> Bookings { get; set; }
        public List<Review> Reviews { get; set; }
    }
}

// Admin.cs
namespace LodgingApp.Domain.Entities
{
    public class Admin
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
    }
}

// Lodging.cs
namespace LodgingApp.Domain.Entities
{
    public class Lodging
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Address { get; set; }
        public decimal PricePerNight { get; set; }
        public int MaxGuests { get; set; }
        public int Bedrooms { get; set; }
        public int Bathrooms { get; set; }
        public bool HasWifi { get; set; }
        public bool HasParking { get; set; }
        public bool HasKitchen { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
        public List<Booking> Bookings { get; set; }
        public List<Review> Reviews { get; set; }
    }
}

// Booking.cs
namespace LodgingApp.Domain.Entities
{
    public class Booking
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public int LodgingId { get; set; }
        public DateTime CheckInDate { get; set; }
        public DateTime CheckOutDate { get; set; }
        public int NumberOfGuests { get; set; }
        public decimal TotalPrice { get; set; }
        public string Status { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public User User { get; set; }
        public Lodging Lodging { get; set; }
        public Payment Payment { get; set; }
    }
}

// Payment.cs
namespace LodgingApp.Domain.Entities
{
    public class Payment
    {
        public int Id { get; set; }
        public int BookingId { get; set; }
        public decimal Amount { get; set; }
        public string PaymentMethod { get; set; }
        public string Status { get; set; }
        public string TransactionId { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public Booking Booking { get; set; }
    }
}

// Review.cs
namespace LodgingApp.Domain.Entities
{
    public class Review
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public int LodgingId { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public User User { get; set; }
        public Lodging Lodging { get; set; }
    }
}

// ===== Repository Interfaces =====

// IRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IRepository<T> where T : class
    {
        Task<T> GetByIdAsync(int id);
        Task<IEnumerable<T>> GetAllAsync();
        Task<T> AddAsync(T entity);
        Task<T> UpdateAsync(T entity);
        Task DeleteAsync(int id);
    }
}

// UserRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IUserRepository : IRepository<User>
    {
        Task<User> GetByEmailAsync(string email);
    }
}

// AdminRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IAdminRepository : IRepository<Admin>
    {
        Task<Admin> GetByEmailAsync(string email);
    }
}

// LodgingRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface ILodgingRepository : IRepository<Lodging>
    {
        Task<IEnumerable<Lodging>> GetAvailableLodgingsAsync(DateTime checkIn, DateTime checkOut);
    }
}

// BookingRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IBookingRepository : IRepository<Booking>
    {
        Task<IEnumerable<Booking>> GetUserBookingsAsync(int userId);
    }
}

// PaymentRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IPaymentRepository : IRepository<Payment>
    {
        Task<Payment> GetByBookingIdAsync(int bookingId);
    }
}

// ReviewRepository.cs
namespace LodgingApp.Domain.Repositories
{
    public interface IReviewRepository : IRepository<Review>
    {
        Task<IEnumerable<Review>> GetLodgingReviewsAsync(int lodgingId);
    }
}

// ===== Service Interfaces =====

// IAuthService.cs
namespace LodgingApp.Domain.Services.Contracts
{
    public interface IAuthService
    {
        Task<AuthResult> LoginAsync(string email, string password);
        Task<AuthResult> RegisterAsync(RegisterRequest request);
        Task<AuthResult> ChangePasswordAsync(int userId, string currentPassword, string newPassword);
        Task<AuthResult> ResetPasswordAsync(string email);
        Task<AuthResult> ValidateTokenAsync(string token);
    }
}

// IBookingService.cs
namespace LodgingApp.Domain.Services.Contracts
{
    public interface IBookingService
    {
        Task<ServiceResult<Booking>> CreateBookingAsync(BookingRequest request);
        Task<ServiceResult<Booking>> UpdateBookingAsync(int id, BookingRequest request);
        Task<ServiceResult> CancelBookingAsync(int id);
        Task<Booking> GetBookingAsync(int id);
        Task<IEnumerable<Booking>> GetUserBookingsAsync(int userId);
        Task<IEnumerable<Booking>> GetLodgingBookingsAsync(int lodgingId);
        Task<bool> IsLodgingAvailableAsync(int lodgingId, DateTime checkIn, DateTime checkOut);
    }
}

// ILodgingService.cs
namespace LodgingApp.Domain.Services.Contracts
{
    public interface ILodgingService
    {
        Task<ServiceResult<Lodging>> CreateLodgingAsync(LodgingRequest request);
        Task<ServiceResult<Lodging>> UpdateLodgingAsync(int id, LodgingRequest request);
        Task<ServiceResult> DeleteLodgingAsync(int id);
        Task<Lodging> GetLodgingAsync(int id);
        Task<IEnumerable<Lodging>> GetAllLodgingsAsync(LodgingFilter filter);
        Task<IEnumerable<Lodging>> GetAvailableLodgingsAsync(DateTime checkIn, DateTime checkOut);
        Task<IEnumerable<Lodging>> SearchLodgingsAsync(string searchTerm);
    }
}

// IPaymentService.cs
namespace LodgingApp.Domain.Services.Contracts
{
    public interface IPaymentService
    {
        Task<ServiceResult<Payment>> ProcessPaymentAsync(PaymentRequest request);
        Task<ServiceResult> RefundPaymentAsync(int id);
        Task<Payment> GetPaymentAsync(int id);
        Task<IEnumerable<Payment>> GetUserPaymentsAsync(int userId);
        Task<IEnumerable<Payment>> GetBookingPaymentsAsync(int bookingId);
        Task<bool> ValidatePaymentAsync(PaymentRequest request);
    }
}

// IReviewService.cs
namespace LodgingApp.Domain.Services.Contracts
{
    public interface IReviewService
    {
        Task<ServiceResult<Review>> CreateReviewAsync(ReviewRequest request);
        Task<ServiceResult<Review>> UpdateReviewAsync(int id, ReviewRequest request);
        Task<ServiceResult> DeleteReviewAsync(int id);
        Task<Review> GetReviewAsync(int id);
        Task<IEnumerable<Review>> GetLodgingReviewsAsync(int lodgingId);
        Task<IEnumerable<Review>> GetUserReviewsAsync(int userId);
        Task<double> GetLodgingAverageRatingAsync(int lodgingId);
    }
} 